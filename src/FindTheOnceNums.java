/*思路:1）如果把数组中的所有数字都依次异或一遍，则可以消掉成对出现的数字，
         那么还有两个数字是单一的，肯定也不同，那么最终异或的结果肯定不是0。
         表示在二进制中肯定有一位是1，那么两个不同的数字，一定有一个在该位为1，
         另一个在该位为0。如果将整个数组按照该位是否为1分为两部分，那么这两部分各自包含一个单一数字。
       2）分为两部分的数组，分别异或，最终结果就是这两个数。
       3）注意：当然不用真的分成两个数组，按照条件查找，边查找，边异或就行了。

diff &= -diff 得到出 diff 最右侧不为 0 的位，也就是不存在重复的两个元素在位级表示上最右侧不同的那一位，利用这一位就可以将两个元素区分开来。
*/

public class FindTheOnceNums {
    public void FindNumsAppearOnce(int [] array,int num1[] , int num2[]) {
        int diff = 0;
        for (int i : array) diff ^= i;
//      取反码，再加一 得到其补码
//      比如：diff = 5
//      00000101 & 11111011 = 0000001
//      以这位为标记进行划分
        diff &= -diff;
        for (int i : array){
            if ((i & diff) == 0) num1[0] ^= i;
            else num2[0] ^= i;
        }
    }
}
